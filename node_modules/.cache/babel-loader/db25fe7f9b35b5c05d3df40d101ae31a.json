{"ast":null,"code":"let store = {\n  _state: {\n    profilePage: {\n      posts: [{\n        id: 1,\n        message: \"Hi how are you\",\n        likesCount: 11\n      }, {\n        id: 2,\n        message: \"It's my first message\",\n        likesCount: 12\n      }],\n      newPostText: \"\"\n    },\n    dialogsPage: {\n      dialogs: [{\n        id: 1,\n        name: \"Taras\"\n      }, {\n        id: 2,\n        name: \"Victor\"\n      }, {\n        id: 3,\n        name: \"Andrey\"\n      }, {\n        id: 4,\n        name: \"Petya\"\n      }, {\n        id: 5,\n        name: \"Vasya\"\n      }, {\n        id: 6,\n        name: \"Stepan\"\n      }],\n      messages: [{\n        id: 1,\n        message: 'Hi'\n      }, {\n        id: 2,\n        message: 'How is your it-kamasutra'\n      }, {\n        id: 3,\n        message: 'Yo'\n      }, {\n        id: 4,\n        message: 'Yo'\n      }, {\n        id: 5,\n        message: 'Yo'\n      }, {\n        id: 6,\n        message: 'Yo'\n      }, {\n        id: 7,\n        message: 'Yo'\n      }]\n    }\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  rerenderEntireTree(state) {},\n\n  addPost() {\n    let newPost = {\n      id: 5,\n      message: this._state.profilePage.newPostText,\n      likesCount: 0\n    };\n\n    this._state.profilePage.posts.push(newPost);\n\n    this._state.profilePage.newPostText = \"\";\n    this.rerenderEntireTree(state);\n  },\n\n  updateNewPostText(newText) {\n    state.profilePage.newPostText = newText;\n    rerenderEntireTree(state);\n  },\n\n  subscriber(observer) {\n    rerenderEntireTree = observer;\n  }\n\n}; // let rerenderEntireTree = (state:RootStateType) => {\n//\n// }\n// let state:RootStateType = {\n//     profilePage : {\n//         posts: [\n//             {id: 1, message: \"Hi how are you\", likesCount: 11},\n//             {id: 2, message: \"It's my first message\", likesCount: 12},\n//         ],\n//         newPostText: \"\"\n//     },\n//     dialogsPage: {\n//         dialogs: [\n//             {id: 1, name: \"Taras\"  },\n//             {id: 2, name: \"Victor\"  },\n//             {id: 3, name: \"Andrey\"  },\n//             {id: 4, name: \"Petya\"  },\n//             {id: 5, name: \"Vasya\"  },\n//             {id: 6, name: \"Stepan\"  },\n//         ],\n//         messages: [\n//             {id:1, message: 'Hi'},\n//             {id:2, message: 'How is your it-kamasutra'},\n//             {id:3, message: 'Yo'},\n//             {id:4, message: 'Yo'},\n//             {id:5, message: 'Yo'},\n//             {id:6, message: 'Yo'},\n//             {id:7, message: 'Yo'},\n//         ]\n//     }\n// }\n// export let addPost = () => {\n//     let newPost = {\n//         id: 5,\n//         message: state.profilePage.newPostText,\n//         likesCount: 0\n//     }\n//     state.profilePage.posts.push(newPost)\n//     state.profilePage.newPostText = \"\"\n//     rerenderEntireTree(state)\n// }\n// export const updateNewPostText = (newText:string) => {\n//     state.profilePage.newPostText = newText\n//     rerenderEntireTree(state)\n// }\n// export const subscriber = (observer: (state:RootStateType) => void) => {\n//     rerenderEntireTree = observer\n// }\n\nexport default store;","map":{"version":3,"sources":["/Users/t.fedoseev/Documents/it-incubator/SocialNetwork/social-network-ts/src/redux/state.ts"],"names":["store","_state","profilePage","posts","id","message","likesCount","newPostText","dialogsPage","dialogs","name","messages","getState","rerenderEntireTree","state","addPost","newPost","push","updateNewPostText","newText","subscriber","observer"],"mappings":"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","sourcesContent":["\n\nexport type PostsType = {\n    id: number\n    message: string\n    likesCount: number\n}\nexport type DialogType = {\n    id: number\n    name: string\n}\nexport type MessageType = {\n    id: number\n    message: string\n}\nexport type ProfilePageType = {\n    posts: Array<PostsType>\n    newPostText: string\n}\nexport type DialogsPageType = {\n    dialogs: Array<DialogType>\n    messages :Array<MessageType>\n}\nexport type RootStateType = {\n    profilePage: ProfilePageType\n    dialogsPage: DialogsPageType\n}\nexport type RootStoreType = {\n    _state:RootStateType\n    getState: () => void\n    rerenderEntireTree: (state:RootStateType) => void\n    addPost: () => void\n    updateNewPostText: () => void\n    subscriber: (observer: (state:RootStateType) => void) => void\n}\n\nlet store:RootStoreType = {\n    _state: {\n    profilePage : {\n        posts: [\n            {id: 1, message: \"Hi how are you\", likesCount: 11},\n            {id: 2, message: \"It's my first message\", likesCount: 12},\n        ],\n        newPostText: \"\"\n    },\n    dialogsPage: {\n        dialogs: [\n            {id: 1, name: \"Taras\"  },\n            {id: 2, name: \"Victor\"  },\n            {id: 3, name: \"Andrey\"  },\n            {id: 4, name: \"Petya\"  },\n            {id: 5, name: \"Vasya\"  },\n            {id: 6, name: \"Stepan\"  },\n        ],\n        messages: [\n            {id:1, message: 'Hi'},\n            {id:2, message: 'How is your it-kamasutra'},\n            {id:3, message: 'Yo'},\n            {id:4, message: 'Yo'},\n            {id:5, message: 'Yo'},\n            {id:6, message: 'Yo'},\n            {id:7, message: 'Yo'},\n        ]\n    }\n},\n    getState() {\n        return this._state\n    },\n    rerenderEntireTree (state)  {\n\n},\n    addPost() {\n    let newPost = {\n        id: 5,\n        message: this._state.profilePage.newPostText,\n        likesCount: 0\n    }\n    this._state.profilePage.posts.push(newPost)\n    this._state.profilePage.newPostText = \"\"\n    this.rerenderEntireTree(state)\n},\n    updateNewPostText(newText:string) {\n    state.profilePage.newPostText = newText\n    rerenderEntireTree(state)\n},\nsubscriber (observer) {\n    rerenderEntireTree = observer\n}\n\n\n}\n\n// let rerenderEntireTree = (state:RootStateType) => {\n//\n// }\n\n\n// let state:RootStateType = {\n//     profilePage : {\n//         posts: [\n//             {id: 1, message: \"Hi how are you\", likesCount: 11},\n//             {id: 2, message: \"It's my first message\", likesCount: 12},\n//         ],\n//         newPostText: \"\"\n//     },\n//     dialogsPage: {\n//         dialogs: [\n//             {id: 1, name: \"Taras\"  },\n//             {id: 2, name: \"Victor\"  },\n//             {id: 3, name: \"Andrey\"  },\n//             {id: 4, name: \"Petya\"  },\n//             {id: 5, name: \"Vasya\"  },\n//             {id: 6, name: \"Stepan\"  },\n//         ],\n//         messages: [\n//             {id:1, message: 'Hi'},\n//             {id:2, message: 'How is your it-kamasutra'},\n//             {id:3, message: 'Yo'},\n//             {id:4, message: 'Yo'},\n//             {id:5, message: 'Yo'},\n//             {id:6, message: 'Yo'},\n//             {id:7, message: 'Yo'},\n//         ]\n//     }\n// }\n\n// export let addPost = () => {\n//     let newPost = {\n//         id: 5,\n//         message: state.profilePage.newPostText,\n//         likesCount: 0\n//     }\n//     state.profilePage.posts.push(newPost)\n//     state.profilePage.newPostText = \"\"\n//     rerenderEntireTree(state)\n// }\n\n// export const updateNewPostText = (newText:string) => {\n//     state.profilePage.newPostText = newText\n//     rerenderEntireTree(state)\n// }\n\n// export const subscriber = (observer: (state:RootStateType) => void) => {\n//     rerenderEntireTree = observer\n// }\n\nexport default store"]},"metadata":{},"sourceType":"module"}