{"ast":null,"code":"const store = {\n  _state: {\n    profilePage: {\n      posts: [{\n        id: 1,\n        message: \"Hi how are you\",\n        likesCount: 11\n      }, {\n        id: 2,\n        message: \"It's my first message\",\n        likesCount: 12\n      }],\n      newPostText: \"\"\n    },\n    dialogsPage: {\n      dialogs: [{\n        id: 1,\n        name: \"Taras\"\n      }, {\n        id: 2,\n        name: \"Victor\"\n      }, {\n        id: 3,\n        name: \"Andrey\"\n      }, {\n        id: 4,\n        name: \"Petya\"\n      }, {\n        id: 5,\n        name: \"Vasya\"\n      }, {\n        id: 6,\n        name: \"Stepan\"\n      }],\n      messages: [{\n        id: 1,\n        message: 'Hi'\n      }, {\n        id: 2,\n        message: 'How is your it-kamasutra'\n      }, {\n        id: 3,\n        message: 'Yo'\n      }, {\n        id: 4,\n        message: 'Yo'\n      }, {\n        id: 5,\n        message: 'Yo'\n      }, {\n        id: 6,\n        message: 'Yo'\n      }, {\n        id: 7,\n        message: 'Yo'\n      }]\n    }\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  _calSubscriber(state) {},\n\n  subscriber(observer) {\n    this._calSubscriber = observer;\n  },\n\n  addPost() {\n    let newPost = {\n      id: 5,\n      message: this._state.profilePage.newPostText,\n      likesCount: 0\n    };\n\n    this._state.profilePage.posts.push(newPost);\n\n    this._state.profilePage.newPostText = \"\";\n\n    this._calSubscriber(this._state);\n  },\n\n  updateNewPostText(newText) {\n    this._state.profilePage.newPostText = newText;\n\n    this._calSubscriber(this._state);\n  },\n\n  dispatch(action) {\n    if (action.type === \"ADD-POST\") {\n      let newPost = {\n        id: 5,\n        message: this._state.profilePage.newPostText,\n        likesCount: 0\n      };\n\n      this._state.profilePage.posts.push(newPost);\n\n      this._state.profilePage.newPostText = \"\";\n\n      this._calSubscriber(this._state);\n    } else if (action.type === \"UPDATE-NEW-POST-TEXT\") {\n      this._state.profilePage.newPostText = action.newText;\n\n      this._calSubscriber(this._state);\n    }\n  }\n\n}; // let rerenderEntireTree = (state:RootStateType) => {\n//\n// }\n// let state:RootStateType = {\n//     profilePage : {\n//         posts: [\n//             {id: 1, message: \"Hi how are you\", likesCount: 11},\n//             {id: 2, message: \"It's my first message\", likesCount: 12},\n//         ],\n//         newPostText: \"\"\n//     },\n//     dialogsPage: {\n//         dialogs: [\n//             {id: 1, name: \"Taras\"  },\n//             {id: 2, name: \"Victor\"  },\n//             {id: 3, name: \"Andrey\"  },\n//             {id: 4, name: \"Petya\"  },\n//             {id: 5, name: \"Vasya\"  },\n//             {id: 6, name: \"Stepan\"  },\n//         ],\n//         messages: [\n//             {id:1, message: 'Hi'},\n//             {id:2, message: 'How is your it-kamasutra'},\n//             {id:3, message: 'Yo'},\n//             {id:4, message: 'Yo'},\n//             {id:5, message: 'Yo'},\n//             {id:6, message: 'Yo'},\n//             {id:7, message: 'Yo'},\n//         ]\n//     }\n// }\n// export let addPost = () => {\n//     let newPost = {\n//         id: 5,\n//         message: state.profilePage.newPostText,\n//         likesCount: 0\n//     }\n//     state.profilePage.posts.push(newPost)\n//     state.profilePage.newPostText = \"\"\n//     rerenderEntireTree(state)\n// }\n// export const updateNewPostText = (newText:string) => {\n//     state.profilePage.newPostText = newText\n//     rerenderEntireTree(state)\n// }\n// export const subscriber = (observer: (state:RootStateType) => void) => {\n//     rerenderEntireTree = observer\n// }\n\nexport default store;","map":{"version":3,"sources":["/Users/t.fedoseev/Documents/it-incubator/SocialNetwork/social-network-ts/src/redux/state.ts"],"names":["store","_state","profilePage","posts","id","message","likesCount","newPostText","dialogsPage","dialogs","name","messages","getState","_calSubscriber","state","subscriber","observer","addPost","newPost","push","updateNewPostText","newText","dispatch","action","type"],"mappings":"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","sourcesContent":["export type PostsType = {\n    id: number\n    message: string\n    likesCount: number\n}\nexport type DialogType = {\n    id: number\n    name: string\n}\nexport type MessageType = {\n    id: number\n    message: string\n}\nexport type ProfilePageType = {\n    posts: Array<PostsType>\n    newPostText: string\n}\nexport type DialogsPageType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessageType>\n}\nexport type RootStateType = {\n    profilePage: ProfilePageType\n    dialogsPage: DialogsPageType\n}\nexport type RootStoreType = {\n    _state: RootStateType\n    getState: () => RootStateType\n    _calSubscriber: (state: RootStateType) => void\n    addPost: () => void\n    updateNewPostText: (newText: string) => void\n    subscriber: (observer: (state: RootStateType) => void) => void\n    dispatch : (action:any) => void\n}\n\nconst store: RootStoreType = {\n    _state: {\n        profilePage: {\n            posts: [\n                {id: 1, message: \"Hi how are you\", likesCount: 11},\n                {id: 2, message: \"It's my first message\", likesCount: 12},\n            ],\n            newPostText: \"\"\n        },\n        dialogsPage: {\n            dialogs: [\n                {id: 1, name: \"Taras\"},\n                {id: 2, name: \"Victor\"},\n                {id: 3, name: \"Andrey\"},\n                {id: 4, name: \"Petya\"},\n                {id: 5, name: \"Vasya\"},\n                {id: 6, name: \"Stepan\"},\n            ],\n            messages: [\n                {id: 1, message: 'Hi'},\n                {id: 2, message: 'How is your it-kamasutra'},\n                {id: 3, message: 'Yo'},\n                {id: 4, message: 'Yo'},\n                {id: 5, message: 'Yo'},\n                {id: 6, message: 'Yo'},\n                {id: 7, message: 'Yo'},\n            ]\n        }\n    },\n    getState() {\n        return this._state\n    },\n    _calSubscriber(state) {\n\n    },\n    subscriber(observer) {\n        this._calSubscriber = observer\n    },\n\n    addPost() {\n        let newPost = {\n            id: 5,\n            message: this._state.profilePage.newPostText,\n            likesCount: 0\n        }\n        this._state.profilePage.posts.push(newPost)\n        this._state.profilePage.newPostText = \"\"\n        this._calSubscriber(this._state)\n    },\n    updateNewPostText(newText: string) {\n        this._state.profilePage.newPostText = newText\n        this._calSubscriber(this._state)\n    },\n\n    dispatch (action) {\n        if (action.type === \"ADD-POST\") {\n            let newPost = {\n                id: 5,\n                message: this._state.profilePage.newPostText,\n                likesCount: 0\n            }\n            this._state.profilePage.posts.push(newPost)\n            this._state.profilePage.newPostText = \"\"\n            this._calSubscriber(this._state)\n        }\n        else if (action.type === \"UPDATE-NEW-POST-TEXT\") {\n            this._state.profilePage.newPostText = action.newText\n            this._calSubscriber(this._state)\n        }\n    }\n\n\n}\n\n// let rerenderEntireTree = (state:RootStateType) => {\n//\n// }\n\n\n// let state:RootStateType = {\n//     profilePage : {\n//         posts: [\n//             {id: 1, message: \"Hi how are you\", likesCount: 11},\n//             {id: 2, message: \"It's my first message\", likesCount: 12},\n//         ],\n//         newPostText: \"\"\n//     },\n//     dialogsPage: {\n//         dialogs: [\n//             {id: 1, name: \"Taras\"  },\n//             {id: 2, name: \"Victor\"  },\n//             {id: 3, name: \"Andrey\"  },\n//             {id: 4, name: \"Petya\"  },\n//             {id: 5, name: \"Vasya\"  },\n//             {id: 6, name: \"Stepan\"  },\n//         ],\n//         messages: [\n//             {id:1, message: 'Hi'},\n//             {id:2, message: 'How is your it-kamasutra'},\n//             {id:3, message: 'Yo'},\n//             {id:4, message: 'Yo'},\n//             {id:5, message: 'Yo'},\n//             {id:6, message: 'Yo'},\n//             {id:7, message: 'Yo'},\n//         ]\n//     }\n// }\n\n// export let addPost = () => {\n//     let newPost = {\n//         id: 5,\n//         message: state.profilePage.newPostText,\n//         likesCount: 0\n//     }\n//     state.profilePage.posts.push(newPost)\n//     state.profilePage.newPostText = \"\"\n//     rerenderEntireTree(state)\n// }\n\n// export const updateNewPostText = (newText:string) => {\n//     state.profilePage.newPostText = newText\n//     rerenderEntireTree(state)\n// }\n\n// export const subscriber = (observer: (state:RootStateType) => void) => {\n//     rerenderEntireTree = observer\n// }\n\nexport default store"]},"metadata":{},"sourceType":"module"}