{"ast":null,"code":"var _jsxFileName = \"/Users/t.fedoseev/Documents/it-incubator/SocialNetwork/social-network-ts/src/components/Dialogs/Dialogs.tsx\";\nimport React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from './Message/Message';\nimport { sendMessageCreator, updateNewMessageBodyCreator } from \"../../redux/state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dialogs = props => {\n  let state = props.store.getState().dialogsPage;\n  let dialogsElement = state.dialogs.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n    name: d.name,\n    id: d.id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 49\n  }, this));\n  let messagesElement = state.messages.map(m => /*#__PURE__*/_jsxDEV(Message, {\n    message: m.message,\n    id: m.id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 51\n  }, this));\n  let newMessageBody = state.newMessageBody;\n\n  let onSendMessageClick = () => {\n    props.store.dispatch(sendMessageCreator());\n  };\n\n  let onNewMessageChange = e => {\n    let body = e.currentTarget.value;\n    props.store.dispatch(updateNewMessageBodyCreator(body));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.dialogs,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.dialogsItems,\n      children: dialogsElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.messages,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: messagesElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: newMessageBody,\n            onChange: onNewMessageChange,\n            placeholder: \"Enter your message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onSendMessageClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Dialogs;\nexport default Dialogs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dialogs\");","map":{"version":3,"sources":["/Users/t.fedoseev/Documents/it-incubator/SocialNetwork/social-network-ts/src/components/Dialogs/Dialogs.tsx"],"names":["React","s","DialogItem","Message","sendMessageCreator","updateNewMessageBodyCreator","Dialogs","props","state","store","getState","dialogsPage","dialogsElement","dialogs","map","d","name","id","messagesElement","messages","m","message","newMessageBody","onSendMessageClick","dispatch","onNewMessageChange","e","body","currentTarget","value","dialogsItems"],"mappings":";AAAA,OAAOA,KAAP,MAAqD,OAArD;AACA,OAAOC,CAAP,MAAc,sBAAd;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAAwCC,kBAAxC,EAA4DC,2BAA5D,QAA8F,mBAA9F;;;AAMA,MAAMC,OAAmC,GAAIC,KAAD,IAAW;AAEnD,MAAIC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAYC,QAAZ,GAAuBC,WAAnC;AAEA,MAAIC,cAAc,GAAGJ,KAAK,CAACK,OAAN,CAAcC,GAAd,CAAkBC,CAAC,iBAAI,QAAC,UAAD;AAAY,IAAA,IAAI,EAAIA,CAAC,CAACC,IAAtB;AAA4B,IAAA,EAAE,EAAID,CAAC,CAACE;AAApC;AAAA;AAAA;AAAA;AAAA,UAAvB,CAArB;AACA,MAAIC,eAAe,GAAGV,KAAK,CAACW,QAAN,CAAeL,GAAf,CAAmBM,CAAC,iBAAI,QAAC,OAAD;AAAS,IAAA,OAAO,EAAGA,CAAC,CAACC,OAArB;AAA8B,IAAA,EAAE,EAAID,CAAC,CAACH;AAAtC;AAAA;AAAA;AAAA;AAAA,UAAxB,CAAtB;AACA,MAAIK,cAAc,GAAGd,KAAK,CAACc,cAA3B;;AAEA,MAAIC,kBAAkB,GAAG,MAAM;AAC3BhB,IAAAA,KAAK,CAACE,KAAN,CAAYe,QAAZ,CAAqBpB,kBAAkB,EAAvC;AACH,GAFD;;AAGA,MAAIqB,kBAAkB,GAAIC,CAAD,IAAwC;AAC7D,QAAIC,IAAI,GAAGD,CAAC,CAACE,aAAF,CAAgBC,KAA3B;AACAtB,IAAAA,KAAK,CAACE,KAAN,CAAYe,QAAZ,CAAqBnB,2BAA2B,CAACsB,IAAD,CAAhD;AAEH,GAJD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAI1B,CAAC,CAACY,OAApB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAIZ,CAAC,CAAC6B,YAApB;AAAA,gBACKlB;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAEX,CAAC,CAACkB,QAAlB;AAAA,8BACI;AAAA,kBAAMD;AAAN;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,gCACI;AAAA,iCAAK;AAAU,YAAA,KAAK,EAAII,cAAnB;AACU,YAAA,QAAQ,EAAEG,kBADpB;AAEU,YAAA,WAAW,EAAE;AAFvB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAA,iCAAK;AAAQ,YAAA,OAAO,EAAEF;AAAjB;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CAlCD;;KAAMjB,O;AAoCN,eAAeA,OAAf","sourcesContent":["import React, {ChangeEvent, ChangeEventHandler} from 'react';\nimport s from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from './Message/Message';\nimport {DialogsPageType, RootStoreType, sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/state\";\n\ntype DialogsPropsType = {\n    store: RootStoreType\n}\n\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\n\n    let state = props.store.getState().dialogsPage\n\n    let dialogsElement = state.dialogs.map(d => <DialogItem name = {d.name} id = {d.id}/>)\n    let messagesElement = state.messages.map(m => <Message message= {m.message} id = {m.id}/>)\n    let newMessageBody = state.newMessageBody;\n\n    let onSendMessageClick = () => {\n        props.store.dispatch(sendMessageCreator())\n    }\n    let onNewMessageChange = (e:ChangeEvent<HTMLTextAreaElement>) => {\n        let body = e.currentTarget.value\n        props.store.dispatch(updateNewMessageBodyCreator(body))\n\n    }\n    return (\n        <div className = {s.dialogs}>\n            <div className = {s.dialogsItems}>\n                {dialogsElement}\n\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElement}</div>\n                <div>\n                    <div><textarea value = {newMessageBody}\n                                   onChange={onNewMessageChange}\n                                   placeholder= \"Enter your message\"></textarea></div>\n                    <div><button onClick={onSendMessageClick }></button></div>\n                </div>\n            </div>\n\n        </div>\n    );\n};\n\nexport default Dialogs;"]},"metadata":{},"sourceType":"module"}